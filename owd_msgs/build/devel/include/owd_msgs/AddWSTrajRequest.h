// Generated by gencpp from file owd_msgs/AddWSTrajRequest.msg
// DO NOT EDIT!


#ifndef OWD_MSGS_MESSAGE_ADDWSTRAJREQUEST_H
#define OWD_MSGS_MESSAGE_ADDWSTRAJREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Wrench.h>

namespace owd_msgs
{
template <class ContainerAllocator>
struct AddWSTrajRequest_
{
  typedef AddWSTrajRequest_<ContainerAllocator> Type;

  AddWSTrajRequest_()
    : endpoint_change()
    , starting_config()
    , ending_config()
    , wrench()
    , ApplyForce(false)
    , af_x(0.0)
    , af_y(0.0)
    , af_z(0.0)
    , af_f(0.0)
    , af_rotational_compliance(false)
    , Vibrate(false)
    , vibrate_hand_x(0.0)
    , vibrate_hand_y(0.0)
    , vibrate_hand_z(0.0)
    , vibrate_amplitude_m(0.0)
    , vibrate_frequency_hz(0.0)
    , max_linear_velocity(0.0)
    , max_angular_velocity(0.0)
    , min_accel_time(0.0)
    , options(0)  {
    }
  AddWSTrajRequest_(const ContainerAllocator& _alloc)
    : endpoint_change(_alloc)
    , starting_config(_alloc)
    , ending_config(_alloc)
    , wrench(_alloc)
    , ApplyForce(false)
    , af_x(0.0)
    , af_y(0.0)
    , af_z(0.0)
    , af_f(0.0)
    , af_rotational_compliance(false)
    , Vibrate(false)
    , vibrate_hand_x(0.0)
    , vibrate_hand_y(0.0)
    , vibrate_hand_z(0.0)
    , vibrate_amplitude_m(0.0)
    , vibrate_frequency_hz(0.0)
    , max_linear_velocity(0.0)
    , max_angular_velocity(0.0)
    , min_accel_time(0.0)
    , options(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _endpoint_change_type;
  _endpoint_change_type endpoint_change;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _starting_config_type;
  _starting_config_type starting_config;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ending_config_type;
  _ending_config_type ending_config;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef uint8_t _ApplyForce_type;
  _ApplyForce_type ApplyForce;

   typedef double _af_x_type;
  _af_x_type af_x;

   typedef double _af_y_type;
  _af_y_type af_y;

   typedef double _af_z_type;
  _af_z_type af_z;

   typedef double _af_f_type;
  _af_f_type af_f;

   typedef uint8_t _af_rotational_compliance_type;
  _af_rotational_compliance_type af_rotational_compliance;

   typedef uint8_t _Vibrate_type;
  _Vibrate_type Vibrate;

   typedef double _vibrate_hand_x_type;
  _vibrate_hand_x_type vibrate_hand_x;

   typedef double _vibrate_hand_y_type;
  _vibrate_hand_y_type vibrate_hand_y;

   typedef double _vibrate_hand_z_type;
  _vibrate_hand_z_type vibrate_hand_z;

   typedef double _vibrate_amplitude_m_type;
  _vibrate_amplitude_m_type vibrate_amplitude_m;

   typedef double _vibrate_frequency_hz_type;
  _vibrate_frequency_hz_type vibrate_frequency_hz;

   typedef float _max_linear_velocity_type;
  _max_linear_velocity_type max_linear_velocity;

   typedef float _max_angular_velocity_type;
  _max_angular_velocity_type max_angular_velocity;

   typedef float _min_accel_time_type;
  _min_accel_time_type min_accel_time;

   typedef uint32_t _options_type;
  _options_type options;




  typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddWSTrajRequest_

typedef ::owd_msgs::AddWSTrajRequest_<std::allocator<void> > AddWSTrajRequest;

typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest > AddWSTrajRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest const> AddWSTrajRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'owd_msgs': ['/home/cloud/catkin_ws/src/owd/owd_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b65f68e91300a226a2666a5857ded18";
  }

  static const char* value(const ::owd_msgs::AddWSTrajRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b65f68e91300a22ULL;
  static const uint64_t static_value2 = 0x6a2666a5857ded18ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "owd_msgs/AddWSTrajRequest";
  }

  static const char* value(const ::owd_msgs::AddWSTrajRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
geometry_msgs/Pose endpoint_change\n\
\n\
\n\
\n\
\n\
float64[] starting_config\n\
float64[] ending_config\n\
\n\
\n\
\n\
\n\
geometry_msgs/Wrench wrench\n\
\n\
\n\
\n\
bool ApplyForce\n\
float64 af_x\n\
float64 af_y\n\
float64 af_z\n\
float64 af_f\n\
bool af_rotational_compliance\n\
\n\
bool Vibrate\n\
float64 vibrate_hand_x\n\
float64 vibrate_hand_y\n\
float64 vibrate_hand_z\n\
float64 vibrate_amplitude_m\n\
float64 vibrate_frequency_hz\n\
\n\
\n\
\n\
float32 max_linear_velocity\n\
float32 max_angular_velocity\n\
float32 min_accel_time\n\
\n\
\n\
uint32 options\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::owd_msgs::AddWSTrajRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.endpoint_change);
      stream.next(m.starting_config);
      stream.next(m.ending_config);
      stream.next(m.wrench);
      stream.next(m.ApplyForce);
      stream.next(m.af_x);
      stream.next(m.af_y);
      stream.next(m.af_z);
      stream.next(m.af_f);
      stream.next(m.af_rotational_compliance);
      stream.next(m.Vibrate);
      stream.next(m.vibrate_hand_x);
      stream.next(m.vibrate_hand_y);
      stream.next(m.vibrate_hand_z);
      stream.next(m.vibrate_amplitude_m);
      stream.next(m.vibrate_frequency_hz);
      stream.next(m.max_linear_velocity);
      stream.next(m.max_angular_velocity);
      stream.next(m.min_accel_time);
      stream.next(m.options);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddWSTrajRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::owd_msgs::AddWSTrajRequest_<ContainerAllocator>& v)
  {
    s << indent << "endpoint_change: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.endpoint_change);
    s << indent << "starting_config[]" << std::endl;
    for (size_t i = 0; i < v.starting_config.size(); ++i)
    {
      s << indent << "  starting_config[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.starting_config[i]);
    }
    s << indent << "ending_config[]" << std::endl;
    for (size_t i = 0; i < v.ending_config.size(); ++i)
    {
      s << indent << "  ending_config[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ending_config[i]);
    }
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    s << indent << "ApplyForce: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ApplyForce);
    s << indent << "af_x: ";
    Printer<double>::stream(s, indent + "  ", v.af_x);
    s << indent << "af_y: ";
    Printer<double>::stream(s, indent + "  ", v.af_y);
    s << indent << "af_z: ";
    Printer<double>::stream(s, indent + "  ", v.af_z);
    s << indent << "af_f: ";
    Printer<double>::stream(s, indent + "  ", v.af_f);
    s << indent << "af_rotational_compliance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.af_rotational_compliance);
    s << indent << "Vibrate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Vibrate);
    s << indent << "vibrate_hand_x: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_hand_x);
    s << indent << "vibrate_hand_y: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_hand_y);
    s << indent << "vibrate_hand_z: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_hand_z);
    s << indent << "vibrate_amplitude_m: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_amplitude_m);
    s << indent << "vibrate_frequency_hz: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_frequency_hz);
    s << indent << "max_linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.max_linear_velocity);
    s << indent << "max_angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.max_angular_velocity);
    s << indent << "min_accel_time: ";
    Printer<float>::stream(s, indent + "  ", v.min_accel_time);
    s << indent << "options: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.options);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_ADDWSTRAJREQUEST_H
