// Generated by gencpp from file owd_msgs/SetFingerCompliantRequest.msg
// DO NOT EDIT!


#ifndef OWD_MSGS_MESSAGE_SETFINGERCOMPLIANTREQUEST_H
#define OWD_MSGS_MESSAGE_SETFINGERCOMPLIANTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace owd_msgs
{
template <class ContainerAllocator>
struct SetFingerCompliantRequest_
{
  typedef SetFingerCompliantRequest_<ContainerAllocator> Type;

  SetFingerCompliantRequest_()
    : id(0)
    , enable(false)
    , offset(0)
    , deadband(0)
    , max_torque(0)  {
    }
  SetFingerCompliantRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , enable(false)
    , offset(0)
    , deadband(0)
    , max_torque(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef int32_t _offset_type;
  _offset_type offset;

   typedef int32_t _deadband_type;
  _deadband_type deadband;

   typedef int32_t _max_torque_type;
  _max_torque_type max_torque;




  typedef boost::shared_ptr< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetFingerCompliantRequest_

typedef ::owd_msgs::SetFingerCompliantRequest_<std::allocator<void> > SetFingerCompliantRequest;

typedef boost::shared_ptr< ::owd_msgs::SetFingerCompliantRequest > SetFingerCompliantRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::SetFingerCompliantRequest const> SetFingerCompliantRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'owd_msgs': ['/home/cloud/catkin_ws/src/owd/owd_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac093ce3db1ec6359902b7f1a85166c2";
  }

  static const char* value(const ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac093ce3db1ec635ULL;
  static const uint64_t static_value2 = 0x9902b7f1a85166c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "owd_msgs/SetFingerCompliantRequest";
  }

  static const char* value(const ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
bool  enable\n\
int32 offset\n\
int32 deadband\n\
int32 max_torque\n\
";
  }

  static const char* value(const ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.enable);
      stream.next(m.offset);
      stream.next(m.deadband);
      stream.next(m.max_torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetFingerCompliantRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::owd_msgs::SetFingerCompliantRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.offset);
    s << indent << "deadband: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deadband);
    s << indent << "max_torque: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_SETFINGERCOMPLIANTREQUEST_H
