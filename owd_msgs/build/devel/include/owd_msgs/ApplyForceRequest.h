// Generated by gencpp from file owd_msgs/ApplyForceRequest.msg
// DO NOT EDIT!


#ifndef OWD_MSGS_MESSAGE_APPLYFORCEREQUEST_H
#define OWD_MSGS_MESSAGE_APPLYFORCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace owd_msgs
{
template <class ContainerAllocator>
struct ApplyForceRequest_
{
  typedef ApplyForceRequest_<ContainerAllocator> Type;

  ApplyForceRequest_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , f(0.0)
    , vibrate_hand_x(0.0)
    , vibrate_hand_y(0.0)
    , vibrate_hand_z(0.0)
    , vibrate_amplitude_m(0.0)
    , vibrate_frequency_hz(0.0)
    , rotational_compliance(false)  {
    }
  ApplyForceRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , f(0.0)
    , vibrate_hand_x(0.0)
    , vibrate_hand_y(0.0)
    , vibrate_hand_z(0.0)
    , vibrate_amplitude_m(0.0)
    , vibrate_frequency_hz(0.0)
    , rotational_compliance(false)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _f_type;
  _f_type f;

   typedef double _vibrate_hand_x_type;
  _vibrate_hand_x_type vibrate_hand_x;

   typedef double _vibrate_hand_y_type;
  _vibrate_hand_y_type vibrate_hand_y;

   typedef double _vibrate_hand_z_type;
  _vibrate_hand_z_type vibrate_hand_z;

   typedef double _vibrate_amplitude_m_type;
  _vibrate_amplitude_m_type vibrate_amplitude_m;

   typedef double _vibrate_frequency_hz_type;
  _vibrate_frequency_hz_type vibrate_frequency_hz;

   typedef uint8_t _rotational_compliance_type;
  _rotational_compliance_type rotational_compliance;




  typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ApplyForceRequest_

typedef ::owd_msgs::ApplyForceRequest_<std::allocator<void> > ApplyForceRequest;

typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest > ApplyForceRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest const> ApplyForceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::owd_msgs::ApplyForceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'owd_msgs': ['/home/cloud/catkin_ws/src/owd/owd_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "193fc0cf730e401d791e0bcb6994ed76";
  }

  static const char* value(const ::owd_msgs::ApplyForceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x193fc0cf730e401dULL;
  static const uint64_t static_value2 = 0x791e0bcb6994ed76ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "owd_msgs/ApplyForceRequest";
  }

  static const char* value(const ::owd_msgs::ApplyForceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 f\n\
float64 vibrate_hand_x\n\
float64 vibrate_hand_y\n\
float64 vibrate_hand_z\n\
float64 vibrate_amplitude_m\n\
float64 vibrate_frequency_hz\n\
bool rotational_compliance\n\
";
  }

  static const char* value(const ::owd_msgs::ApplyForceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.f);
      stream.next(m.vibrate_hand_x);
      stream.next(m.vibrate_hand_y);
      stream.next(m.vibrate_hand_z);
      stream.next(m.vibrate_amplitude_m);
      stream.next(m.vibrate_frequency_hz);
      stream.next(m.rotational_compliance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApplyForceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::owd_msgs::ApplyForceRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "f: ";
    Printer<double>::stream(s, indent + "  ", v.f);
    s << indent << "vibrate_hand_x: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_hand_x);
    s << indent << "vibrate_hand_y: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_hand_y);
    s << indent << "vibrate_hand_z: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_hand_z);
    s << indent << "vibrate_amplitude_m: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_amplitude_m);
    s << indent << "vibrate_frequency_hz: ";
    Printer<double>::stream(s, indent + "  ", v.vibrate_frequency_hz);
    s << indent << "rotational_compliance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotational_compliance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_APPLYFORCEREQUEST_H
